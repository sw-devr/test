스프링 부트 ( spring boot )

1. 환경설정
  - JDK 11
  - springboot 2.7.8  ( 2.6 버전 전후로 많이 변경됨 )
  - sts 3.9.14 
  - mysql + mybatis

2. boot 프로젝트 생성

  가. 웹사이트 이용 ( initializer 이용 )
 
	https://start.spring.io

	자바, 서블릿/jsp , springframe
	    - 비 웹 환경 : jar
	    - 웹 환경 : war
	
	springboot
	    - jar ( 웹환경인 경우 war 가능 ) 
	      웹을 jar로 실행가능한 이유가 springboot는 tomcat을 내장이 가능하다.

	정보지정하고 GENERATE 버튼 선택하면 demo.zip 다운로드 됨.
	workspace에 복사하고 압축 해제.
	sts에서 import > maven > Existing Maven Projects > workspace에 압축 푼 demo 선택하고 finish
	pom.xml에서 
	
	<version>2.7.8</version>

	<java.version>11</java.version>
	
	로 바꾸고 Maven update .

  나. sts에서 로컬 이용

	file > new > spring starter project 선택
	(* 기존 spring framework는 spring legacy project 선택.)
	
	> dependencies에 spring web 추가 후 finish 

	pom.xml에서 
	
	<version>2.7.8</version>

	<java.version>11</java.version>
	
	로 바꾸고 Maven update .

3. boot 프로젝트 구조

  가. spring framework
	- 필요한 의존성을 개별적으로 설정했음.
	    예) DB연동시 최소한 5개의 의존성 설정 ==> 거의 모두 필요한 의존성들이다.

  나. spring boot
	- 거의 필요한 의존성 파일들을 묶어서 제공 ==> starter 개념이다.

  다. boot 기본적인 의존성

	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter</artifactId>	==> 비 웹 어플리케이션 개발용
		<artifactId>spring-boot-starter-web</artifactId>	==> 웹 어플리케이션 개발용 ( tomcat 내장 설치됨, jackson포함 , ... )
	</dependency>
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-test</artifactId>
		<scope>test</scope>
	</dependency>

  라. src/main/java
	==> 자동으로 생성해주는 빈
	==> 웹 및 비 웹 환경에서 무조건 있어야 함.
		이유는 시작점이다.
	==> 웹 어플리케이션이라도 jar 배포가 가능한 이유이다.

	@SpringBootApplication
	public class DemoApplication {

		public static void main(String[] args) {
			SpringApplication.run(DemoApplication.class, args);
		}

	}

	* @SpringBootApplication는 다음과 같은  3가지 어노테이션을 포함한다.

	@SpringBootConfiguration	==> 추가적인 configuration 설정이 가능 ( 이전 프레임워크에서 멀티 xml 사용한 방식과 유사 )
					@Configuration 으로 추가 configuration 지정이 가능.
	@EnableAutoConfiguration	==> starter-xxx 지정하면 거의 자동으로 configuration 설정된다.
	@ComponentScan	==> 자동으로 빈 생성 ( 프레임워크의 <context:component-scan>과 동일 기능 )
			앞으로 생성할 빈들은 반드시 XXXApplication이 가진 패키지의 하위 패키지로 만들어야 자동으로 scan되어 생성될 수 있다.
			예) com.example.dao
			    com.example.controller
			    .....

  마. xml 지원 안함.
	- 이전 프레임워크에서는 xml에 설정정보를 설정했음.
	- boot에서는 src/main/resource 의 application.properties가 대신한다.
	- application.properties 대신에 application.yml 사용가능 ( yml을 "야물" 파일이라고 부른다. )

	application.properties 사용
	예) key.key2.key3 = 값
	    key.xxx.yyy = 값

	application.yml 사용
	예) key:
		key2:
			key3: 값
		xxx:
			yyy: 값

  바. boot 프로젝트 실행

	Run as > Spring Boot App 선택
	
######################################################################################################################

문법 정리
 
  1. 빈 생성  ( boot 문서의 권장방법 )
	==> 앞으로 생성할 빈들은 반드시 XXXApplication이 가진 패키지의 하위 패키지로 만든다.

	com.example.
		     XXXApplication ( main, @SpringBootApplication )
		     .service
			-*.java  ( @Service )
		     .dao
			-*.java  ( @Repository ) 

  2. 의존성 설정 ( DI )

	가. @Autowired
	
	나. 생성자 이용
	    - 주입할 데이터타입을 파라미터로 가진 생성자 이용한다.
	    - 프레임워크에서도 사용 가능 ( 4.3 이후 )
	    - 기본생성자를 지정하면 안됨.

  3. 생성된 빈 조회 방법

	ApplicationContext ctx =
	SpringApplication.run(DemoApplication.class, args);
		
	DeptServiceImpl service = ctx.getBean("xxx", DeptServiceImpl.class);
	System.out.println(service.getMsg());

  4. I18N
	- 다국어 구현 
	가. 번들 파일 작성
	 src/main/resource
	      message 폴더
		greeting-en.properties
		greeting-ko.properties
		greeting.properties ( 기본값, 필수 ) 

	나. application.properties 등록 ( 프레임워크에서는 xml에 등록 )

	spring.messages.basename=message/greeting
	spring.messages.encoding=utf-8
	spring.messages.fallback-to-system-locale=false

	true 지정 : 시스템의 로케일을 따른다. ( 현재 PC 국가별 설정을 따른다. )
	false 지정 : 기본 properties를 따른다.

	다. 사용.
	
		BeanFactory	MessageSource
		       |		        |
		         ApplicationContext
			         |
		     GenericXmlApplicationContext
		          WebApplicationContext
				.....
		a. main 메서드 가진 Application에서 사용

		ApplicationContext ctx = SpringApplication.run(DemoApplication.class, args);
		String msg = ctx.getMessage("greet", new String[] {"하이~", "~~~"}, Locale.ENGLISH);
		System.out.println(msg);

		b. 임의의 빈에서 사용
			
			@Autowired
			MessageSource ctx;

		* 프레임워크에서는 implements MessageSourceAware 하고 
	
		@Override
		public void setMessageSource(MessageSource messageSource) {
			this.resources = messageSource;
		}

5. AOP ( Aspect Oriented Programming, 관점지향 프로그래밍 )

	1) 개념 : 필수기능과 부가기능을 분리해서 필요할 때 부가기능을 주입 받아서 사용하자.

	2) 용어
		- 타겟파일 : 필수기능을 구현한 빈
		- aspect : 부가기능을 구현한 빈
		- joinpoint : 부가기능(aspect)이 필수기능(target)에 주입하는 시점의미.
				Spring에서는 메서드 호출 시점만 가능하다.
				AOP 원천기술은 Spring 이전 기술로서 다양한 주입시점이 있다.
				( 예. 메서드 호출시점, 객체생성시점, 변수값 변경시점, ..... )

		- pointcut : 어떤 메서드 호출시 주입할 것인지 표현하는 표현식 의미.
		- advice : 메서드   호출 전 : before advice
				호출 후 : after advice
				정상실행후 결과값 리턴 후 : after returning advice
				예외발생 후 : after throwing advice
				또는 4가지 모두 : around advice

	3) AOP 의존성 설정
		
		* 프레임워크 버전
		<dependency>
    			<groupId>org.aspectj</groupId>
    			<artifactId>aspectjweaver</artifactId>
    			<version>1.9.21</version>
		</dependency>

		* boot 버전 - starter로 제공
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

	4) AOP 활성화

	가. 프레임워크
		<!-- AOP 활성화 -->
		<aop:aspectj-autoproxy />

	나. boot ( 자동활성화 )
		application.properties에서 비활성화 가능
		spring.aop.auto=false ( 기본 : true )
		기본은 true 여서 aop가 먹히는데 false로 바꾸면 aop가 안먹힘

6. DB 연동

	가. 프레임워크 버전
		
	- 의존성 설정

<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.33</version>
</dependency>		
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.4.6</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>1.3.2</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.0.8.RELEASE</version>
</dependency>
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-dbcp2</artifactId>
    <version>2.5.0</version>
</dependency>

		- jdbc.properties에 4가지 정보 설정 ( key값이 임의의 값 )

		jdbc.driver=com.mysql.cj.jdbc.Driver
		jdbc.url=jdbc:mysql://localhost:3306/testdb?characterEncoding=UTF8
		jdbc.userid=root
		jdbc.passwd=root1234

		- xml에 설정정보 추가 ( user.xml )

		jdbc.properties 등록
		BasicDataSource 등록
		TransactionManager 등록 ( 명시적 등록 필수 ) ==>  @Transactional
		SqlSessionFactoryBean 등록 ( Mapper와 DTO 별칭 등록 )
		SqlSessionTemplate 등록

		- DAO, Service 작성
		
	나. boot 버전

	- 의존성추가 ( pom.xml ) 

<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>2.1.4</version>
</dependency>

<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
        <version>8.0.33</version>
</dependency>	
	
<!-- Hikari DBCP 내부적으로 사용 -->

	- DTO 작성
	@Alias("별칭")

	- application.properties에 4가지 정보 설정 ( 정해진 key값 이용 )
	   spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	   spring.datasource.url=jdbc:mysql://localhost:3306/testdb?useUnicode=true&serverTimezone=Asia/Seoul
	   spring.datasource.username=root
	   spring.datasource.password=root1234

	- application.properties에서 이외의 작업

	  mapper 등록 : 
		mybatis.mapper-locations=com/config/*Mapper.xml
	  dto 별칭 등록 :
		mybatis.type-aliases-package=com.example.dto

	- DAO, service 작성

	- TransactionManager 자동등록되어 있기 때문에
	@Transactional만 서비스에서 사용하면 트랜잭션 처리가 된다.

###################################################################################################

7. SpringMVC

	가. 웹 개발 의존성 ( starter-web 의존성 )

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		- tomcat 자동내장 ( 기본port:8080 )
		- jackson-databind 포함
		- fileupload 의존성 포함
		... 

	나. 기본 웹 구조가 자동으로 제공안됨.

		기존 프레임워크에서 제공된 구조가 제공 안됨. 	필요하면 명시적으로 작성
		src/main
			webapp
			    - WEB-INF
		 		- lib
				- views
				     - hello.jsp

	다. jsp가 기본 화면 template이 아니다. 
		즉, jsp의 의존성이 자동으로 추가되지 않음.
		따라서 필요하면 의존성을 추가해야 된다.
		boot가 권장하는 화면 template은 thymeleaf(*.html) 이다.
		<dependency>
		    <groupId>org.apache.tomcat.embed</groupId>
		    <artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		
		<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
		</dependency>

	라. jsp의 경로 설정
		이전 프레임워크에서는 xml( servlet-context.xml )에 설정

		<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<beans:property name="prefix" value="/WEB-INF/views/" />
			<beans:property name="suffix" value=".jsp" />
		</beans:bean>

		boot에서는 application.properties에 jsp 경로 설정

		# jsp 경로 설정
		spring.mvc.view.prefix=/WEB-INF/views/
		spring.mvc.view.suffix=.jsp

	마. tomcat 포트 변경 ( application.properties )

		server.port=8090 

	바. context 명 변경 ( application.properties )

		요청 url : http://localhost:8090/컨텍스트명/요청매핑값	

		# context명 변경
		server.servlet.context-path=/app	

	사. Controller 작성
		이전 프레임워크 문법과 동일.

8. js, css, image 리소스 설정

	가. 이전 프레임워크	
		webapp
		      - WEB-INF
			js
			    *.js
			css
			    *.css
			images
			    *.png
			views
			    *.jsp

    	<!-- 정적자원 경로 지정 -->
    	<mvc:resources location="/WEB-INF/css/" mapping="/css/**" />	
    	<mvc:resources location="/WEB-INF/js/" mapping="/js/**" />	
    	<mvc:resources location="/WEB-INF/images/" mapping="/images/**" />	

	나. boot 

        	src/main/resource
	    static 폴더에 저장하면 자동인식되어 사용가능

	    static
	       js
	         *.js
	       css
	          *.css
	       image
	          *.jpg


9. 파일업로드

	가. 이전 프레임워크
		- 의존성 설정
	( pom.xml ) 
 	<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
	<dependency>
    		<groupId>commons-fileupload</groupId>
    		<artifactId>commons-fileupload</artifactId>
    		<version>1.5</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
	<dependency>
    		<groupId>commons-io</groupId>
    		<artifactId>commons-io</artifactId>
    		<version>2.15.1</version>
	</dependency>
		
	
 	- multipartResolver 등록
	( servlet.context.xml )

    	<!-- MultipartResolver 등록 -->
    	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    		<property name="maxUploadSizePerFile" value="1024*1024*2"></property>  
    	</bean>
		
		- 화면작성
		<form action="upload" method="POST" enctype="multipart/form-data">

		- DTO 작성
		public class UploadDTO {

		String theText;
		CommonsMultipartFile theFile;
		}

		- Controller 작성
		@PostMapping("/upload)
		public String upload(UploadDTO dto, Model m){

			String theText = dto.getTheText();
			CommonMultipartFile theFile = dto.getTheFile();
		}
		
		- POST 요청이기 때문에 web.xml에 인코딩 필터를 작성해야한다.( 한글처리 )

	나. boot
		- 의존성 설정 불필요 ( starter-web에 의존성이 포함 )
		- 업로드 활성화/비활성화 설정 ( application.properties )
		- 업로드 파일크기 설정 ( application.properties )

		spring.servlet.multipart.enabled=true
		spring.servlet.multipart.max-file-size=2
		spring.servlet.multipart.max-request-size=10

		- 화면작성
		<form action="upload" method="POST" enctype="multipart/form-data">

		- DTO 작성
		public class UploadDTO {

		String theText;
		MultipartFile theFile;
		// CommonsMultipartFile 안됨.
		}

		- Controller 작성
		
		@PostMapping("/upload")
		public String upload(UploadDTO dto, Model m){
			String theText = dto.getTheText();
			MultipartFile theFile = dto.getTheFile();
		}
		
		- POST 요청에 대한 한글처리 자동 지원됨.

10. HandlerInterceptor
	
	가. 이전 프레임워크
		- 의존성 추가 없음
		- MyHandlerInterceptor extends HandlerInterceptorAdapter 하고 필요한  메서드 재정의.
		- xml에 등록
    		<mvc:interceptors>
    			<mvc:interceptor>
    				<mvc:mapping path="/loginCheck/*" />
    				<ref bean="xxx" />
    			</mvc:interceptor>
    		</mvc:interceptors>

	나. boot 
		- 의존성 추가 없음
		- extends HandlerInterceptorAdapter는 deprecated 됨.
		- @Component
		   public class MyHandlerInterceptor implements HandlerInterceptor
			로 변경.

		필요한 메서드만 재정의한다.
		// interface를 implements할 경우 상수, 추상메서드, default메서드, static메서드를 상속받을 수 있고, 추상메서드를 제외한 것은 상속받지 않을 수 있다.

		- Configuration 설정 빈에 등록

		@Configuration
		public class WebConfig implements WebMvcConfigurer {

			@Autowired
			MyHandlerInterceptor xxx;
	
			@Override
			public void addInterceptors(InterceptorRegistry registry) {
				registry.addInterceptor(xxx)
						.addPathPatterns("/login", "/mypage");
			}
		}

###############################################################################################

11. profile

	가. 이전 프레임워크
		- user_dev.xml  ==> 개발버전
			<beans profile="dev">
		  user_pord.xml ==> 배포버전
			<beans profile="prod">

		- ApplicationContext에서 xml 등록 후 active profile 지정
		ctx.getEnvironment().setActiveProfiles("prod"); // dev, prod
		  ctx.load("classpath:user-dev.xml", "classpath:user-prod.xml");
		  ctx.refresh();

	나. boot
	  - application.properties ( 이름이 정해져 있음 )		
		active profile 지정
		
	    application-dev.properties
	    application-prod.properties

12. @Value

	application.properties에 설정된 값을 얻을 수 있다.
	xxx=1234

	Controller에서

		@Value("${xxx}")
		String value;

13. yml
	boot에서 사용한 configuration 설정 파일 2가지

	가. application.properties
		예) key.key2.key3=값

	니. application.yml
		예) key:
		         key2:
			   key3:값

14. JSON 처리
		       JSON -------> java ( @RequestBody )
	브라우저 ------------------------------> Controller
		<------------------------------
			JSON <--------- java ( @ResponseBody )

	가. 이전 프레임워크
		- 의존성 추가

		<dependency>
    			<groupId>com.fasterxml.jackson.core</groupId>
    			<artifactId>jackson-databind</artifactId>
    			<version>2.14.2</version>
		</dependency>

		- 어노테이션 필요

			JSON -----------> java @RequestBody
			java ------------> JSON @ResponseBody

		- @RequestBody와 @ResponseBody 활성화
			    <mvc:annotation-driven />
			    <mvc:default-servlet-handler/>

	나. boot
		- 자동으로 의존성 추가 ( starter-web )	
	
		- 어노테이션 필요

			JSON -----------> java @RequestBody
			java ------------> JSON @ResponseBody

		- @RequestBody와 @ResponseBody 자동 활성화

################################################################################################
lombok 사용
	가. c:\lombok.jar 저장
	나. 의존성 설정
	다. lombok.jar 실행
	    cmd 창에서
	    c:\>java -jar lombok-1.18.26.jar 엔터
	라. 실행된 화면에서 location 선택하고
	    사용하고자 하는 sts의 sts.exe 선택하고 install/update 한다.
################################################################################################

15. 게시판 구현

	가. 프로젝트 생성 
	     boot_07_board

	나. board 테이블 작성

		create table board
		( num integer primary key auto_increment,
		  title varchar(50) not null,
		  author varchar(50) not null,
		  content varchar(500) not null,
		  writeday date default ( now() ),
		  readcnt integer default 0 );

		INSERT INTO board ( title, author, content )
		VALUES ( "실습", "홍길동", "내용무");
		COMMIT;

	다. 환경설정

	    - 의존성 설정
	    
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency>
		    <groupId>org.apache.tomcat.embed</groupId>
		    <artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		
		<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
	
	라. BoardDTO.java 작성 ( lombok 이용 )

	  @Alias("BoardDTO");
	  public class BoardDTO{}

	마. mapper 작성

		src/main/resource/
			com.config.mapper
				BoardMapper.xml

	바. application.properties DB 연동 설정

       	# mysql 연동하기 위한 4가지 정보 설정
		spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
		spring.datasource.url=jdbc:mysql://localhost:3306/testdb?useUnicode=true&serverTimezone=Asia/Seoul
		spring.datasource.username=root
		spring.datasource.password=root1234

	# mapper 등록
		mybatis.mapper-locations=com/config/*Mapper.xml
	# dto 별칭 등록
		mybatis.type-aliases-package=com.example.dto

	사. DAO와 Service, Controller 작업

/////////////////////////////////////////////////////////////////////
/////////// 페이징 처리
////////////////////////////////////////////////////////////////////

1. 필요한 정보?

	List<BoardDTO> list;    // 한 페이지에 보여줄 데이터
	
	int totalCount;	// 전체 레코드 개수
	int perPage=3;	// 페이지당 보여줄 레코드 개수
	int curPage;	// 페이지 번호

	위의 4개의 정보는 PageDTO에 저장한다.

2. slq문 정렬 (내림차순)

	ORDER BY DESC
	